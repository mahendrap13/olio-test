import React from "react";
import { makeStyles } from "@material-ui/core/styles";
import TextField from "@material-ui/core/TextField";
import Switch from "@mui/material/Switch";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";
import { styled } from "@mui/material/styles";
import FormControlLabel from "@mui/material/FormControlLabel";
import uploadfile from "./Images/2994042.jpg";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select from "@mui/material/Select";
import "./Css/addproduct.css";

const useStyles = makeStyles((theme) => ({
  textField: {
    marginLeft: theme.spacing(1),
    marginRight: theme.spacing(1),
    width: 200,
  },
  cssLabel: {
    color: "gray",
  },
  cssOutlinedInput: {
    "&$cssFocused $notchedOutline": {
      borderColor: `${theme.palette.primary.main} !important`,
    },
  },
}));

const IOSSwitch = styled((props) => (
  <Switch focusVisibleClassName=".Mui-focusVisible" disableRipple {...props} />
))(({ theme }) => ({
  width: 42,
  height: 26,
  padding: 0,
  "& .MuiSwitch-switchBase": {
    padding: 0,
    margin: 2,
    transitionDuration: "300ms",
    "&.Mui-checked": {
      transform: "translateX(16px)",
      color: "#fff",
      "& + .MuiSwitch-track": {
        backgroundColor: theme.palette.mode === "dark" ? "#2ECA45" : "#614BD7",
        opacity: 1,
        border: 0,
      },
      "&.Mui-disabled + .MuiSwitch-track": {
        opacity: 0.5,
      },
    },
    "&.Mui-focusVisible .MuiSwitch-thumb": {
      color: "#33cf4d",
      border: "6px solid #fff",
    },
    "&.Mui-disabled .MuiSwitch-thumb": {
      color:
        theme.palette.mode === "light"
          ? theme.palette.grey[100]
          : theme.palette.grey[600],
    },
    "&.Mui-disabled + .MuiSwitch-track": {
      opacity: theme.palette.mode === "light" ? 0.7 : 0.3,
    },
  },
  "& .MuiSwitch-thumb": {
    boxSizing: "border-box",
    width: 22,
    height: 22,
  },
  "& .MuiSwitch-track": {
    borderRadius: 26 / 2,
    backgroundColor: theme.palette.mode === "light" ? "#E9E9EA" : "#39393D",
    opacity: 1,
    transition: theme.transitions.create(["background-color"], {
      duration: 500,
    }),
  },
}));

function ValidField() {
  const classes = useStyles();
  const [avatarFile, setAvatarFile] = React.useState(null);
  const [books, setBooks] = React.useState({
    title: "",
    bookformat: "",
    price: "",
    quantity: "",
    status: "",
    categotyId: "",
    images: [],
    author: "",
    description: "",
    shortDescription: "",
  });
  console.log(books);
  const handleChange = (event) => {
    const { name, value } = event.target;
    setBooks((prevInput) => ({
      ...prevInput,
      [name]: value,
    }));
  };
  const handleFileChange = (event) => {
    setAvatarFile(event.target.files);
  };

  const handleSubmit = () => {
    const updateData = new FormData();
    updateData.append("avatar", avatarFile);
    for (const key in books) {
      updateData.append(key, books[key]);
    }
  };

  return (
    <div className=" p-5">
      <div className="addproduct bg-white py-4 px-7 rounded-md">
        <TextField
          onChange={handleChange}
          id="standard-name"
          label="Book Title"
          name="title"
          value={books.title}
          margin="normal"
          variant="outlined"
          className="w-full"
          InputLabelProps={{
            classes: {
              root: classes.cssLabel,
              focused: classes.cssFocused,
            },
          }}
          InputProps={{
            classes: {
              root: classes.cssOutlinedInput,
              focused: classes.cssFocused,
              notchedOutline: classes.notchedOutline,
            },
            inputMode: "numeric",
          }}
        />
        <div className="flex gap-5">
          <TextField
            onChange={handleChange}
            id="standard-name"
            label="Author"
            name="author"
            value={books.author}
            margin="normal"
            variant="outlined"
            className="w-2/4"
            InputLabelProps={{
              classes: {
                root: classes.cssLabel,
                focused: classes.cssFocused,
              },
            }}
            InputProps={{
              classes: {
                root: classes.cssOutlinedInput,
                focused: classes.cssFocused,
                notchedOutline: classes.notchedOutline,
              },
              inputMode: "numeric",
            }}
          />
          <TextField
            onChange={handleChange}
            id="standard-name"
            label="Book Format"
            name="bookformat"
            value={books.bookformat}
            margin="normal"
            variant="outlined"
            className="w-2/4"
            InputLabelProps={{
              classes: {
                root: classes.cssLabel,
                focused: classes.cssFocused,
              },
            }}
            InputProps={{
              classes: {
                root: classes.cssOutlinedInput,
                focused: classes.cssFocused,
                notchedOutline: classes.notchedOutline,
              },
              inputMode: "numeric",
            }}
          />
        </div>
        <div className="flex gap-5">
          <TextField
            onChange={handleChange}
            id="standard-name"
            label="Quantity"
            margin="normal"
            name="quantity"
            value={books.quantity}
            type="number"
            variant="outlined"
            className="w-2/4"
            InputLabelProps={{
              classes: {
                root: classes.cssLabel,
                focused: classes.cssFocused,
              },
            }}
            InputProps={{
              classes: {
                root: classes.cssOutlinedInput,
                focused: classes.cssFocused,
                notchedOutline: classes.notchedOutline,
              },
              inputMode: "numeric",
            }}
          />
          <TextField
            onChange={handleChange}
            id="standard-name"
            label="Price"
            type="number"
            name="price"
            value={books.price}
            margin="normal"
            variant="outlined"
            className="w-2/4"
            InputLabelProps={{
              classes: {
                root: classes.cssLabel,
                focused: classes.cssFocused,
              },
            }}
            InputProps={{
              classes: {
                root: classes.cssOutlinedInput,
                focused: classes.cssFocused,
                notchedOutline: classes.notchedOutline,
              },
              inputMode: "numeric",
            }}
          />
        </div>
        <div>
          <TextField
            onChange={handleChange}
            label="Description"
            margin="normal"
            variant="outlined"
            name="description"
            value={books.description}
            className="w-full"
            id="outlined-multiline-static"
            multiline
            minRows={4}
            InputLabelProps={{
              classes: {
                root: classes.cssLabel,
                focused: classes.cssFocused,
              },
            }}
            InputProps={{
              style: { height: "100px" },
              classes: {
                root: classes.cssOutlinedInput,
                focused: classes.cssFocused,
                notchedOutline: classes.notchedOutline,
              },
              inputMode: "numeric",
            }}
          />
        </div>
        <div>
          <TextField
            onChange={handleChange}
            id="standard-name"
            label="Short Description"
            margin="normal"
            name="shortDescription"
            value={books.shortDescription}
            variant="outlined"
            className="w-full"
            InputLabelProps={{
              classes: {
                root: classes.cssLabel,
                focused: classes.cssFocused,
              },
            }}
            InputProps={{
              classes: {
                root: classes.cssOutlinedInput,
                focused: classes.cssFocused,
                notchedOutline: classes.notchedOutline,
              },
              inputMode: "numeric",
            }}
          />
        </div>
        <div>
          <FormControl className="w-full" style={{ margin: "12px 0" }}>
            <InputLabel id="demo-simple-select-autowidth-label">
              CategoryID
            </InputLabel>
            <Select
              labelId="demo-simple-select-autowidth-label"
              id="demo-simple-select-autowidth"
              name="categotyId"
              value={books.categotyId}
              onChange={handleChange}
              label="CategoryID"
              width="60%"
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              <MenuItem value={10}>Twenty</MenuItem>
              <MenuItem value={21}>Twenty one</MenuItem>
              <MenuItem value={22}>Twenty one and a half</MenuItem>
            </Select>
          </FormControl>
        </div>
        <div className="drags">
          <div className="uploadfile">
            <div className="texts">
              <h1>Drop or Select file</h1>
              <p>Drop files here or click browse thorough your machine</p>
            </div>
            <img src={uploadfile} alt="uploadfile" />
          </div>
          <input
            id="outlined-basic"
            type="file"
            className="w-full"
            variant="outlined"
            name="images"
            multiple
            onChange={handleFileChange}
          />
        </div>
        <div className="flex items-center gap-5">
          <p className="text-gray-500">Status</p>
          <FormControlLabel
            control={<IOSSwitch sx={{ m: 1 }} />}
            name="status"
            value={books.status}
            onChange={handleChange}
          />
        </div>
        <div className="flex justify-end	items-center		">
          <Stack>
            <Button
              variant="outlined"
              style={{
                color: "white",
                border: " 1px solid #614BD7",
                backgroundColor: "#614BD7",
              }}
              onClick={handleSubmit}
            >
              Add Book
            </Button>
          </Stack>
        </div>
      </div>
    </div>
  );
}

export default ValidField;
